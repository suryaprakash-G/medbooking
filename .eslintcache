[{"/root/webdev/medbooking/medbooking/src/index.js":"1","/root/webdev/medbooking/medbooking/src/pages/appointment.js":"2","/root/webdev/medbooking/medbooking/src/pages/main.js":"3","/root/webdev/medbooking/medbooking/src/pages/patient_form.js":"4","/root/webdev/medbooking/medbooking/src/pages/view_appointment.js":"5","/root/webdev/medbooking/medbooking/src/pages/adminlogin.js":"6","/root/webdev/medbooking/medbooking/src/pages/adminmain.js":"7","/root/webdev/medbooking/medbooking/src/components/history.js":"8","/root/webdev/medbooking/medbooking/src/components/back_btn.js":"9","/root/webdev/medbooking/medbooking/src/components/doc_select.js":"10"},{"size":1064,"mtime":1608713812468,"results":"11","hashOfConfig":"12"},{"size":17205,"mtime":1610888402037,"results":"13","hashOfConfig":"12"},{"size":8684,"mtime":1610906932682,"results":"14","hashOfConfig":"12"},{"size":7041,"mtime":1610885566898,"results":"15","hashOfConfig":"12"},{"size":3580,"mtime":1608712659910,"results":"16","hashOfConfig":"12"},{"size":3165,"mtime":1609656640166,"results":"17","hashOfConfig":"12"},{"size":13704,"mtime":1610710740129,"results":"18","hashOfConfig":"12"},{"size":86,"mtime":1596016516262,"results":"19","hashOfConfig":"12"},{"size":345,"mtime":1596212097612,"results":"20","hashOfConfig":"12"},{"size":530,"mtime":1607865623632,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"5m960t",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/root/webdev/medbooking/medbooking/src/index.js",[],["46","47"],"/root/webdev/medbooking/medbooking/src/pages/appointment.js",["48"],"import React from 'react';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport Calendar from 'react-calendar';\nimport '../style/appointment.css';\nimport '../style/react_calendar.css';\nimport Back from '../components/back_btn'\nimport Docsel from '../components/doc_select'\n  const time=[\"09:00 am\",\"10:00 am\",\"11:00 am\",\"12:00 pm\",\"01:00 pm\",\"02:00 pm\",\"03:00 pm\",\"04:00 pm\",\"05:00 pm\",\"06:00 pm\"];//12 hr format for displaying\n  const day=[\"sun\",\"mon\",\"tue\",\"wed\",\"thu\",\"fri\",\"sat\"];\n  var data =  [\n    [\"01-02-2020\",\"02-02-2020\",\"03-02-2020\",\"04-02-2020\",\"05-02-2020\",\"06-02-2020\",\"07-02-2020\"],\n    [\"mon\",\"tue\",\"wed\",\"thu\",\"fri\",\"sat\",\"sun\"],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0],\n    [0,0,0,0,0,0,0]\n  ];\n  var mail=\"\";\n  const timings=[\"9:00\",\"10:00\",\"11:00\",\"12:00\",\"13:00\",\"14:00\",\"15:00\",\"16:00\",\"17:00\",\"18:00\"];//server 24 hr format\n  var doclist=[];//doctor json list with name and id and possible mor in future\n  var date=new Date();//current/selected date throughout this file\n  const today=new Date(date);\n  var maxdate=new Date(date)\n  maxdate.setDate(maxdate.getDate()+180);\n  date.setHours(0,0,0,0);\n  var gdatechk=[0,0,0,0,0,0,0];//get date all 7 date return check list\n  //var datpop=false;\n  var doc=[\"loading . . .   \",\"\"];\n  class Appointment extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n          loading: true,\n          docselect:0,\n          docname:\" \",//doctor name\n          curdate:today,//system date\n          showModal: false,//datepicker toggle\n          desc_load:true,//description loading flag\n          dclist_load:true,//doc list loading flag\n          calen_load:true//appointment calendar loading flag\n        };\n        console.log(\"first curdate: \"+this.state.curdate);\n        this.check_login =this.check_login.bind(this);\n        this.check_login();\n        this.get_doc = this.get_doc.bind(this);\n        this.get_desc = this.get_desc.bind(this);\n        this.get_date = this.get_date.bind(this);\n        this.logout=this.logout.bind(this);\n        this.bookapt=this.bookapt.bind(this)\n        this.onChange = this.onChange.bind(this);\n        this.getdatechk = this.getdatechk.bind(this);\n        axiosRetry(axios, { retries: 3 });\n        this.selectcallback= this.selectcallback.bind(this);\n      }\n      componentDidMount() {\n        this.get_doc();\n    }\n    check_login(){\n        const loggedin = localStorage.getItem(\"user\");\n        if (loggedin!=null) {\n            mail=JSON.parse(loggedin)[\"mail\"];\n            this.setState({user:JSON.parse(loggedin)});\n        }\n        else{\n            alert(\"please login first\");\n            this.props.history.push('/');\n        }\n    }\n    logout(){\n        this.setState({user:{}});\n        localStorage.clear();\n        this.props.history.push('/');\n      }\n    get_desc(e){\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{id:e}).then(res => { \n            if(res.data[\"message\"]!==\"Internal server error\"){\n            doc[1]=res.data;\n            this.setState({desc_load:false});\n            }\n    })\n    }\n    //get vertical timimngs per day and put on the matrix in a given column in data matrix\n    get_date(lpdate,i){\n        if(lpdate<today){\n            for(var y=2;y<=11;y++)//10 time values\n                {data[y][i]=5;}\n            gdatechk[i]=1;\n            this.getdatechk()\n            }\n        else{\n            //make unbookable for today\n            if(lpdate.toDateString()===(today).toDateString()){\n                for(y=2;y<=11;y++)//10 time values\n                    {data[y][i]=5;}\n                gdatechk[i]=1;\n                } \n        //post values\n        var month=lpdate.getMonth()+1\n        var getdate=lpdate.getDate()+'-'+month;\n        var dateyear=String(lpdate.getFullYear());\n        var doc=this.state.docselect;\n            axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdate`,{date:getdate,year:dateyear,doc:doc,mail:mail}).then(res => {   \n                if(res.data[\"message\"]!==\"Internal server error\"){\n                    console.log(\"response: \"+i+\"  \"+JSON.stringify(res.data));\n                    for(var x in res.data) {\n                        var slot=res.data[x];\n                        console.log(\"res body \"+slot);\n                        //if day value is h- holiday lock all timings on that thing\n                        if(slot[\"day\"]===\"h\"){\n                            for(var y=2;y<=11;y++)//10 time values\n                                {data[y][i]=5;}\n                                gdatechk[i]=1;\n                        }else{//if not holiday or spl day parse timing slots\n                            for(y in timings){\n                                if(String(timings[y]) in slot){\n                                    console.log(String(timings[y])+\" oclock is \"+ slot[timings[y]]);\n                                    console.log(\"y value\"+y);   \n                                    //[ a- available ]  [ b- booked ]   [ c- cancelled ] [ h- holiday/doc leave]\n                                    if(slot[timings[y]]==='a'){\n                                        data[parseInt(y)+2][i]=0;\n                                    }else if(slot[timings[y]]==='t'){//taken\n                                        data[parseInt(y)+2][i]=1;\n                                    }else if(slot[timings[y]]==='c'){//cancelled\n                                        data[parseInt(y)+2][i]=2;\n                                    }else if(slot[timings[y]]==='u'){//doc unavailable\n                                        data[parseInt(y)+2][i]=3;\n                                    }else if(slot[timings[y]]==='b'){//my booked\n                                        data[parseInt(y)+2][i]=4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    gdatechk[i]=1;\n                    this.getdatechk()\n                }\n                })\n            }\n    }\n    getdatechk(){\n        var allchk=true;\n        for(var i=0;i<=6;i++){\n            if(gdatechk[i]!==1){\n                allchk=false;\n                break;\n            }\n        }\n        if(allchk===true){\n            this.setState({calen_load:false});\n            for(i=0;i<=6;i++){gdatechk[i]=0;}}\n    }\n    get_doc(e){\n        axios.get(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{}).then(res => {\n            //console.log(res.data);\n          if(res.data[\"message\"]!==\"Internal server error\"){\n              doclist=res.data;\n              doc[0]=doclist[0]['n'];\n              this.get_desc(doclist[0]['id']);\n              this.setState({docselect:doclist[0]['id']});\n              this.setState({docname:doclist[0]['n']});\n              this.onChange(date);\n              this.setState({dclist_load:false});\n          }\n        })\n    }\n    selectcallback = (childData) => {\n        this.setState({desc_load:true});\n        this.setState({docselect:doclist[parseInt(childData)]['id']},()=>{\n            this.onChange(date);\n            this.setState({calen_load:true});});\n        this.setState({docname:doclist[childData]})\n\n        this.setState({docname:doclist[parseInt(childData)]['n']});\n        doc[0]=doclist[parseInt(childData)]['n'];\n        this.get_desc(doclist[childData]['id']);\n    }\n\n    renderTable() {\n        return data.map((dat, index) => {\n            var td=\"ta\";\n            var ret;\n            if(index=== 0){td=\"t1\";//date row\n            ret=<tr key={index} className={td}>\n                    <td>{dat[0]}</td>\n                    <td>{dat[1]}</td>\n                    <td>{dat[2]}</td>\n                    <td>{dat[3]}</td>\n                    <td>{dat[4]}</td>\n                    <td>{dat[5]}</td>\n                    <td>{dat[6]}</td>\n                </tr>;\n            }\n            else if(index===1){td=\"t2\";//day row\n            ret=<tr key={index} className={td}>\n                    <td>{dat[0]}</td>\n                    <td>{dat[1]}</td>\n                    <td>{dat[2]}</td>\n                    <td>{dat[3]}</td>\n                    <td>{dat[4]}</td>\n                    <td>{dat[5]}</td>\n                    <td>{dat[6]}</td>\n                </tr>;\n            }\n            else if(index>1){//rest of time slot in table\n                var cln=[],txt=[],dis=[];// arrays of -  classname , display text , button disable flag\n                for(var i=0;i<=6;i++){\n                    switch(dat[i]){\n                        case 0:\n                            cln.push(\"appt-a\");//available\n                            txt.push(time[index-2]);\n                            dis.push(0);\n                            break;\n                        case 1:\n                            cln.push(\"appt-t\");\n                            txt.push(time[index-2]+\"\\n taken \");//already booked taken\n                            dis.push(1);\n                            break;\n                        case 2:\n                            cln.push(\"appt-c\");\n                            txt.push(time[index-2]+\"\\n appointment cancelled \");// ur booked appointment cancelled\n                            dis.push(1);\n                            break;\n                        case 3:\n                            cln.push(\"appt-u\");//doc unavailable\n                            txt.push(\"unavailable\");\n                            dis.push(1);\n                            break;\n                        case 4:\n                            cln.push(\"appt-b\");//booked\n                            txt.push(time[index-2]+\"\\n your appointment \");//your upcomming appointment\n                            dis.push(0);\n                            break;\n                        case 5:\n                            cln.push(\"appt-l\");//locked\n                            txt.push(time[index-2]+\"\\n --- \");//locked date as its not today or holiday\n                            dis.push(0);\n                            break;\n                        default:\n                            cln.push(\"appt-a\");\n                            txt.push(time[index-2]);\n                            dis.push(1);\n                    }\n                }\n                ret=<tr key={index} className={td}>\n                        <td><button disabled={dis[0]} className={cln[0]} onClick={this.bookapt} value={[index-2,0]}>{txt[0]}</button></td>\n                        <td><button disabled={dis[1]} className={cln[1]} onClick={this.bookapt} value={[index-2,1]}>{txt[1]}</button></td>\n                        <td><button disabled={dis[2]} className={cln[2]} onClick={this.bookapt} value={[index-2,2]}>{txt[2]}</button></td>\n                        <td><button disabled={dis[3]} className={cln[3]} onClick={this.bookapt} value={[index-2,3]}>{txt[3]}</button></td>\n                        <td><button disabled={dis[4]} className={cln[4]} onClick={this.bookapt} value={[index-2,4]}>{txt[4]}</button></td>\n                        <td><button disabled={dis[5]} className={cln[5]} onClick={this.bookapt} value={[index-2,5]}>{txt[5]}</button></td>\n                        <td><button disabled={dis[6]} className={cln[6]} onClick={this.bookapt} value={[index-2,6]}>{txt[6]}</button></td>\n                    </tr>;\n                   \n            }\n           return ret\n        })\n     }\n     //book or check booked appointment\n     bookapt(e){//params =  [0 -time slot index value ,  2 -day index (sratr week day is 0) ]\n        if(this.state.calen_load===false){\n            var bkval=e.currentTarget.value;\n            var bookdate=new Date(this.state.curdate);\n            bookdate.setDate(bookdate.getDate()-(3));\n            bookdate.setDate(bookdate.getDate()+parseInt(bkval[2]));\n            switch(data[parseInt(bkval[0])+2][parseInt(bkval[2])]){\n                case 0:\n                    console.log(\"booking curdate: \"+ this.state.curdate);\n                    //new booking function\n                    this.props.history.push({pathname:'/form',\n                    state: {bookdate:bookdate,\n                        booktime:bkval[0],\n                        doc:this.state.docselect,\n                        docname:this.state.docname}});\n                    break;\n                case 4:\n                    console.log(\"apptview curdate: \"+ this.state.curdate);\n                    //already booked details \n                    this.props.history.push({pathname:'/appointment',\n                    state: {\n                        bookdate:bookdate.getDate()+\"-\"+(bookdate.getMonth()+1),\n                        booktime:time[bkval[0]],\n                        year:bookdate.getFullYear(),\n                        doc:this.state.docselect,\n                        docname:this.state.docname,\n                        timed:timings[bkval[0]],\n\n                    }});\n                    console.log(\"year : \"+bookdate.getFullYear());\n                    break;\n                default:\n                    break;\n            }\n        }\n     }\n     handleClickbook = () => {\n        if (!this.state.showModal) {\n          document.addEventListener(\"click\", this.handleOutsideClickbook, false);\n        } else {\n          document.removeEventListener(\"click\", this.handleOutsideClickbook, false);\n        }\n    \n        this.setState(prevState => ({\n          showModal: !prevState.showModal\n        }));\n      };\n    \n      handleOutsideClickbook = e => {\n        if (!this.nodebook.contains(e.target)) this.handleClickbook();\n      };\n//date picker clicked calendar dates change function\n    onChange = (dateco) => {\n        this.setState({calen_load:true});\n       //resetting table\n       for(var iks=0;iks<=11;iks++)\n       for(var jks=0;jks<=6;jks++)\n        data[iks][jks]=0;\n        //setting week firstday\n        var datec=new Date(dateco);\n        console.log(\"date picker : \"+datec);\n       datec.setDate(datec.getDate()-3);\n       var lpdate=new Date(datec);\n       lpdate.setHours(0,0,0,0);\n       console.log(\"datec: \"+datec);\n       console.log(\"assigned value\"+lpdate)\n        //vertical date fetching and parsing on data variable matrix\n       for(var i=0;i<=6;i++){\n           data[0][i]=lpdate.getDate()+'-'+(lpdate.getMonth()+1)+'-'+lpdate.getFullYear();//first row date\n           console.log(\"lpdate gdate: \"+lpdate);\n           data[1][i]=day[lpdate.getDay()];//second row day\n           //get timings per day\n            this.get_date(lpdate,i);//rest of all vertical time per day getting and parsing on data matrix\n            //loop adding date\n           lpdate.setDate(lpdate.getDate()+1);\n        }\n        this.setState({showModal:false})\n      }\n      \n    render(){\n        return(\n        <div className=\"row appointment\">\n            <div className=\"sidepan col-lg-3\">\n                <div>\n                    <Back/>\n                    {this.state.dclist_load?\n                        <span className=\"spinner-border spin-white\"></span>\n                        :<div>select doctor<Docsel className=\"container-fluid\" parentCallback = {this.selectcallback} doc={doclist}/></div>\n                    }\n                </div>\n                <hr className=\"solid\"></hr>\n                <div className=\"row\">\n                <img className=\"img dp\" src={\"https://d23yysxhlq0p5m.cloudfront.net/dp/\"+this.state.docselect+\".jpg\"}/>\n                    <div className=\"doc\">{doc[0]}</div>\n                </div>{\n                this.state.desc_load? <span className=\"spinner-border spin-white\"></span>:\n                    <div className=\"description\">{doc[1]}</div>\n                }\n                <div className=\"container-fluid\"></div>\n                <button className=\"logout-btn\" onClick={this.logout}>Logout</button>\n                <div className=\"mailid\">{mail}</div>\n                \n                \n            </div>\n            <div className=\"main col-lg-9\">\n                <div className=\"header\">\n                Appointment\n                </div>\n                <div className=\"flexbox\">\n                    <div className=\"datepiktxt\">{data[0][3]}</div>\n                    <button className=\"datepikbtn\" onClick={this.handleClickbook}>change date</button>\n                    <div ref={nodebook => {this.nodebook = nodebook;}}>\n                    {this.state.showModal && (\n                        <Calendar className=\"modal-calendar\" minDate={today} maxDate={maxdate} onChange={this.onChange} value={date} />\n                    )}\n                </div>\n                </div>\n                \n                <div className=\"appointments\">\n                        <div className= {this.state.calen_load?\"blur\":null}>\n                        <table className=\"table\">\n                            <tbody>\n                                {this.renderTable()}\n                            </tbody>\n                        </table>\n                        </div>\n                    </div>\n            </div>\n        </div>\n        )\n    }\n}\nexport default Appointment;","/root/webdev/medbooking/medbooking/src/pages/main.js",["49","50"],"import React from 'react';\nimport axios from 'axios';\n//import '../style/main.css';\nimport '../style/sass/main.scss';\nimport axiosRetry from 'axios-retry';\n\nclass Main extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n        mail:'',\n        pass:'',\n        pass2:'',\n        phno:'',\n        addr:'',\n        gen:'Female',\n        passlen:'6',\n        show:'false',\n        lg_loading:false,\n        sg_loading:false,\n        invalid:\"\"\n        }\n        //cant even autobind itself lazy crap\n        this.loginchk = this.loginchk.bind(this)\n        this.login = this.login.bind(this)\n        this.signup = this.signup.bind(this)\n        this.showlg = this.showlg.bind(this)\n        this.showsgp = this.showsgp.bind(this)\n        this.stoplg = this.stoplg.bind(this);\n        this.stopsg = this.stopsg.bind(this);\n        this.hidebox  = this.hidebox.bind(this)\n        this.c_mail = this.c_mail.bind(this)\n        this.c_pass = this.c_pass.bind(this)\n        this.c_pass2 = this.c_pass2.bind(this)\n        this.c_phone = this.c_phone.bind(this)\n        this.c_gen = this.c_gen.bind(this)\n        this.c_addr = this.c_addr.bind(this)\n        axiosRetry(axios, { retries: 3 });\n      }\n      componentWillMount(){\n          document.addEventListener('mousedown',this.cick)\n      }\n    //check if logged in\n    loginchk(e){ \n        if(this.state.show==='false')\n        {\n            const loggedin = localStorage.getItem(\"user\");\n            if (loggedin!=null) {\n                this.setState({user:loggedin});\n                this.props.history.push('/book');\n            }else{\n                this.showlg();}\n        }\n        else{this.hidebox();}\n        e.preventDefault();\n    } \n    stoplg(){\n        console.log(\"stopped loading\");\n        this.setState({lg_loading:false});\n    }stopsg(){\n        this.setState({sg_loading:false});\n    }\n    login(e){\n        var valid=true;\n        if(this.state.pass===\"\"){valid=false;\n            this.setState({invalid:\"please enter password\"})}\n        if(this.state.mail===\"\"){valid=false;\n            this.setState({invalid:\"mail empty\"})}\n        if(valid===true){\n        this.setState({lg_loading:true});\n        const user = {\n            mail: this.state.mail,\n            pass: this.state.pass\n          };\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/login`,  user )\n        .then(res => {\n            this.setState({lg_loading:false});\n          if(res.data===\"loged in\"){\n            localStorage.setItem('user',JSON.stringify(user));\n            this.props.history.push('/book');\n          }else{\n              this.setState({invalid:\"invalid credentials\"});\n          }\n        }).catch(error => {\n            this.stoplg();\n          });\n    }\n    e.preventDefault();\n    }\n    signup(e){\n        var valid=true;\n        if(this.state.addr===\"\"){valid=false;\n            this.setState({invalid:\"address empty\"})}\n        if(this.state.phno===\"\"){valid=false;\n            this.setState({invalid:\"phone number empty\"})}\n        if(this.state.pass2===\"\"){valid=false;\n            this.setState({invalid:\"re-type password\"})}\n        if(this.state.pass===\"\"){valid=false;\n            this.setState({invalid:\"please enter password\"})}\n        if(this.state.mail===\"\"){valid=false;\n            this.setState({invalid:\"mail empty\"})}\n        if(this.state.mail===\"\"){valid=false;\n            this.setState({invalid:\"mail empty\"})}\n        if(valid===true){\n        this.setState({sg_loading:true});\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/signup`,{\n            mail: this.state.mail,\n            pass: this.state.pass,\n            phno: this.state.phno,\n            addr: this.state.addr,\n            gen: this.state.gen,\n          })\n        .then(res => {\n            this.setState({sg_loading:false});\n          //console.log(res.data[\"result\"]);\n          if(res.data[\"result\"]===\"signed up\"){\n              alert(\"signed up check mail to verify account\");\n          }\n        }).catch(this.stopsg());\n    }\n        e.preventDefault();\n    }\n\n    //show and hide popup variants\n    showlg(){this.setState({show:'login'});}\n    showsgp(){this.setState({show:'signup'});}\n    hidebox(){this.setState({show:'false'});}\n    //change textbox values\n    c_mail(e){this.setState({ mail: e.currentTarget.value});this.setState({invalid:\"\"});}\n    c_pass(e){this.setState({ pass: e.currentTarget.value});this.setState({invalid:\"\"});}\n    c_pass2(e){this.setState({ pass2: e.currentTarget.value});this.setState({invalid:\"\"});}\n    c_phone(e){this.setState({ phno: e.currentTarget.value});this.setState({invalid:\"\"});}\n    c_addr(e){this.setState({addr:e.currentTarget.value});this.setState({invalid:\"\"});}\n    c_gen(e){this.setState({gen:e.currentTarget.value});this.setState({invalid:\"\"});}\n    render(){\n        return(\n        <div className=\"main-page container-fluid\">\n            surya<br/> \n            \n           {(this.state.show!=='false')?\n            <div id=\"myModal\" className=\"modal modal-login\">\n                <div className=\"modal-content\">\n                    <span className=\"close\" onClick={this.hidebox}>&times;</span>\n                        \n                    <div className=\"con\">\n                        <button  onClick={this.showlg} className=\"buttons \">\n                            <div className={(this.state.show===\"login\")?\"selected container\":\"\"}>Login</div></button>\n                        <button  onClick={this.showsgp} className=\"buttons\">\n                            <div className={(this.state.show===\"signup\")?\"selected container\":\"\"}>Signup</div></button>\n                    </div>\n                    {(this.state.show==='login')?\n                    <form className='flex-container'>\n                            <input value={this.state.mail} onChange={this.c_mail} className=\"mail inputbox\" placeholder=\"Email\" />\n                                <div/>\n                            <input value={this.state.pass} onChange={this.c_pass} type=\"password\" className=\"pass inputbox\" placeholder=\"Password\" />\n                            <div className=\"invalidtxt\">{this.state.invalid}</div>\n                            {this.state.lg_loading?<button className=\"submit\" onClick={this.login} disabled>\n                                                    <span className=\"spinner-border\"></span></button>\n                                                :<button className=\"submit\" onClick={this.login}>Login</button>\n                            }\n                            </form>:\n                    <form className='flex-container'>\n                            <div className=\"row\">\n                                <img src={gl} className=\"icons\" alt=\"google\"/>\n                                <img src={fb} className=\"icons\" alt=\"facebook\"/>\n                            </div>\n                            <input value={this.state.mail} onChange={this.c_mail}  className=\"mail inputbox\" placeholder=\"Email\" />\n                                <div/>\n                            <input value={this.state.pass} onChange={this.c_pass}  className=\"pass inputbox\" type=\"password\" placeholder=\"Password\" />\n                                <div/>\n                            <input value={this.state.pass2} onChange={this.c_pass2}  className=\"pass2 inputbox\" type=\"password\" placeholder=\"Retype Password\" />\n                                <div/>\n                            <input value={this.state.phno} onChange={this.c_phone} className=\"phno inputbox\" placeholder=\"Phone Number\" />\n                            <input value={this.state.addr} onChange={this.c_addr} className=\"addr inputbox\" placeholder=\"Address\" />\n                            <select ClassName=\"Gen\"  value={this.state.gen} onChange={this.c_gen}>\n                                    <option value=\"Female\">Female</option>\n                                    <option value=\"Male\">Male</option>\n                                    <option value=\"Other\">Other</option>\n                            </select>\n                            {this.state.sg_loading?<button className=\"submit\" onClick={this.login} disabled>\n                            <span className=\"spinner-border\"></span></button>\n                            :<button className=\"submit\" onClick={this.signup}>Signup</button>}\n                            </form>\n                }\n                </div>\n            </div>\n        \n        :null\n        }\n            <button className=\"button\"  onClick={this.loginchk}>\n                Book Appointment\n            </button>\n            \n        </div>\n        )\n    }\n}\nexport default Main;\n","/root/webdev/medbooking/medbooking/src/pages/patient_form.js",[],"/root/webdev/medbooking/medbooking/src/pages/view_appointment.js",[],"/root/webdev/medbooking/medbooking/src/pages/adminlogin.js",[],"/root/webdev/medbooking/medbooking/src/pages/adminmain.js",["51"],"import React from 'react';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport Docsel from '../components/doc_select'\nimport Calendar from 'react-calendar';\nimport '../style/adminmain.css';\nconst timings=[\"9:00\",\"10:00\",\"11:00\",\"12:00\",\"13:00\",\"14:00\",\"15:00\",\"16:00\",\"17:00\",\"18:00\"];//server 24 hr format\nvar doclist=[];//doctor json list with name and id and possible mor in future\nvar doc=[\"loading . . .   \",\"\"];\nvar date=new Date();//current/selected date throughout this file\nvar maxdate=new Date(date);\nconst time=[\"09:00 am\",\"10:00 am\",\"11:00 am\",\"12:00 pm\",\"01:00 pm\",\"02:00 pm\",\"03:00 pm\",\"04:00 pm\",\"05:00 pm\",\"06:00 pm\"];//12 hr format for displaying\nconst day=[\"sun\",\"mon\",\"tue\",\"wed\",\"thu\",\"fri\",\"sat\"];\nvar data =  [\n    [\"01-02-2020\"],\n    [\"mon\"],\n    [0,0,0,0,0,0,0,0,0,0,0,0],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n];\nmaxdate.setDate(maxdate.getDate()+180);\nvar uname,pass;\nclass AdminMain extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.check_login =this.check_login.bind(this);\n        this.check_login();\n        if(uname===\"admin\")\n            this.get_doc();\n        else\n            this.get_date(date);\n        this.state = {\n            docselect:uname,\n            holiday:\"\",\n            modload:false,\n            calen_load:true,\n            dclist_load:true,//doc list loading flag\n            confirm_box:false\n        };\n        this.logout=this.logout.bind(this);\n        this.openappt=this.openappt.bind(this);\n        this.reset_table=this.reset_table.bind(this);\n        axiosRetry(axios, { retries: 3 });\n      }\n      //login check\n      check_login(){\n        const loggedin = localStorage.getItem(\"admin\");\n        if (loggedin==null) {\n            alert(\"please login first\");\n            this.props.history.push('/admin');\n        }else{\n            uname=JSON.parse(loggedin)[\"uname\"];\n            pass=JSON.parse(loggedin)[\"pass\"];}\n      }\n      get_doc(e){\n          this.reset_table();\n        axios.get(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{}).then(res => {\n          if(res.data[\"message\"]!==\"Internal server error\"){\n              doclist=res.data;\n              doc[0]=doclist[0]['n'];\n              this.get_desc(doclist[0]['id']);\n              this.setState({docselect:doclist[0]['id']});\n              this.setState({docname:doclist[0]['n']});\n              this.onChange(date);\n              this.setState({dclist_load:false});\n          }\n        })\n    }\n      get_date(lpdate){\n        //post values\n        var month=lpdate.getMonth()+1\n        var getdate=lpdate.getDate()+'-'+month;\n        var dateyear=String(lpdate.getFullYear());\n        var doc=uname;\n        this.setState({holiday:\"\"});\n        if(uname===\"admin\")\n            doc=this.state.docselect;\n        var send={date:getdate,year:dateyear,doc:doc};\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/admin/view`,send).then(res => {   \n            if(res.data[\"message\"]!==\"Internal server error\"){\n                console.log(\"admin gdateresponse: \"+JSON.stringify(res.data));\n                    //if day value is h- holiday lock all timings on that thing\n                    if(JSON.stringify(res.data[\"day\"])==='{\"S\":\"h\"}'){\n                        console.log(\"admin gdateresponse: \"+JSON.stringify(res.data[\"day\"]));\n                        this.setState({holiday:\" (holiday)\"});\n                        for(var y=0;y<=9;y++)//10 time values\n                            {data[2][y]=5;}\n                    }else{//if not holiday or spl day parse timing slots\n                        for(y in timings){\n                            if(String(timings[y]) in res.data){\n                                console.log(String(timings[y])+\" oclock is \"+ JSON.stringify(res.data[timings[y]]));\n                                console.log(\"y value\"+y);   \n                                //[ a- available ] [t- taken] [ c- cancelled ] [ h- holiday/doc leave]\n                                if(res.data[timings[y]]['S']==='a'){\n                                    data[2][parseInt(y)]=0;\n                                }else if(res.data[timings[y]]['S']==='t'){//taken(appointment fixed)\n                                    data[2][parseInt(y)]=1;\n                                    this.get_details(lpdate,y);\n                                }else if(res.data[timings[y]]['S']==='u'){//doc unavailable\n                                    data[2][parseInt(y)]=3;\n                                }\n                            }\n                        }\n                    }\n                \n        this.setState({calen_load:false});\n            }\n            })\n    }\n    onChange = (datec) => {\n        this.reset_table();\n        date=datec;\n        console.log(\"date picker : \"+datec);\n        this.setState({calen_load:true});\n       //resetting table\n       for(var jks=0;jks<=12;jks++)\n            data[2][jks]=0;\n        //setting date and day\n        data[0][0]=datec.getDate()+'-'+(datec.getMonth()+1)+'-'+datec.getFullYear();//first row date\n        console.log(\"datec gdate: \"+datec);\n        data[1][0]=day[datec.getDay()];//second row day\n        //get timings per day\n        this.get_date(datec);//rest of all vertical time per day getting and parsing on data matrix\n        this.setState({showModal:false})\n      }\n    logout(){\n        this.setState({admin:{}});\n        localStorage.clear();\n        this.props.history.push('/admin');\n      }\n    get_details(e,i){\n        console.log(e);\n        var month=e.getMonth()+1\n        var getdate=e.getDate()+'-'+month;\n        var year=String(e.getFullYear());\n        var det={\n        date:getdate,\n        time:timings[i],\n        year:year,\n        pass:pass,\n        uname:uname,\n        doc:this.state.docselect}\n        console.log(det);\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/admin/details`,det).then(res => { \n            if(res.data!==\"error\"&&res.data!==\"no app\"){\n            console.log(res.data);\n            data[4][i]=res.data[\"first name\"].S+\" \"+res.data[\"last name\"].S;\n            data[5][i]=res.data.gen.S;\n            data[6][i]=res.data.dob.S;\n            data[7][i]=res.data.desc.S;\n            data[8][i]=res.data.mail.S;\n            this.setState({desc_load:false});\n            }\n    })\n    }\n    get_desc(e){\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{id:e}).then(res => { \n            if(res.data[\"message\"]!==\"Internal server error\"){\n            doc[1]=res.data;\n            this.setState({desc_load:false});\n            }\n    })}\n    selectcallback = (childData) => {\n        this.setState({desc_load:true});\n        this.setState({docselect:doclist[parseInt(childData)]['id']},()=>{\n        this.onChange(date);\n        this.setState({calen_load:true});});\n        this.setState({docname:doclist[childData]})\n        this.setState({docname:doclist[parseInt(childData)]['n']});\n        doc[0]=doclist[parseInt(childData)]['n'];\n        this.get_desc(doclist[childData]['id']);\n    }\n    renderTable() {\n        return data[2].map((dat,index)=>{\n            var cln,txt,con;// arrays of -  classname , display text , button disable flag\n                switch(dat){\n                    case 0:\n                        cln=\"appt-a\";//available\n                        con=\"mark doctor unavailable ?\";\n                        txt=time[index];\n                        break;\n                    case 1:\n                        cln=\"appt-b\";\n                        con=\"cancel appointment ?\";\n                        txt=time[index]+\"\\n fixed \";//already booked taken\n                        break;\n                    case 3:\n                        cln=\"appt-u\";//doc unavailable\n                        con=\"mark doctor available ?\";\n                        txt=\"unavailable\";\n                        break;\n                    case 5:\n                        cln=\"appt-l\";//locked\n                        txt=time[index]+\"\\n --- \";//locked date as its not today or holiday\n                        break;\n                    default:\n                        cln=\"appt-a\";\n                        txt=time[index-2];\n                }\n               return(<tbody>\n                    <tr key={index} className={\"row\"+index}>\n                        {uname===\"admin\"?\n                        <td><button className={cln} disabled={dat===5?1:0} onClick={() => { if(uname===\"admin\"){if (window.confirm(con)){console.log(\"adminmod-\"+dat);this.openappt(index)}} }} value={[index]}>{txt}</button></td>:\n                        <td><button className={cln}  value={[index]}>{txt}</button></td>\n                    }\n                        <td className=\"textblk\">{data[4][index]}</td>\n                        <td className=\"textblk\">{data[5][index]}</td>\n                        <td className=\"textblk\">{data[6][index]}</td>\n                        <td className=\"textblk\">{data[7][index]}</td>\n                        <td className=\"textblk\">{data[8][index]}</td>\n                    </tr>\n                    </tbody>)\n           })\n        \n    }\n    reset_table(){\n        for(var i=0;i<=11;i++)\n            data[2][i]=0;\n        for(i=3;i<=8;i++)\n        for(var j=0;j<=10;j++){\n            data[i][j]=\" \";\n        }\n    }\n\n    openappt(bkval){\n        console.log(bkval);\n        if(this.state.calen_load===false){\n            //params setting\n            var month=date.getMonth()+1;\n            var getdate=date.getDate()+'-'+month;\n            var params={\n                doc:this.state.docselect,\n                uname:uname,\n                upass:pass,\n                mod:\"\",\n                time:\"\",\n                year:String(date.getFullYear()),\n                date:getdate\n            }\n            if(bkval===\"hol\"){\n                console.log(\"holiday curdate: \"+ date);\n                if(this.state.holiday===\"\")\n                    params[\"mod\"]=\"hol\";\n                else\n                    params[\"mod\"]=\"wor\";\n                this.adminmod(params)\n            }\n            else{\n                switch(data[2][bkval]){\n                    case 0:\n                        params[\"mod\"]=\"ua\";\n                        params[\"time\"]=timings[bkval]\n                        this.adminmod(params)\n                        break;\n                    case 1:\n                        params[\"mod\"]=\"can\";\n                        params[\"time\"]=timings[bkval]\n                        this.adminmod(params)\n                        break;\n                    case 3:\n                        params[\"mod\"]=\"a\";\n                        params[\"time\"]=timings[bkval]\n                        this.adminmod(params)\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n    adminmod(params){\n        this.setState({calen_load:true});\n        console.log(params);\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/admin/mod`,params).then(res => {\n            //console.log(res.data);\n          if(res.data===\"success\"){\n            this.onChange(date);\n          }\n        }).catch(error => {\n            this.setState({calen_load:false});\n            alert(\"please try again\");\n          });\n    }\n    handleClickbook = () => {\n        if (!this.state.showModal) {\n          document.addEventListener(\"click\", this.handleOutsideClickbook, false);\n        } else {\n          document.removeEventListener(\"click\", this.handleOutsideClickbook, false);\n        }\n    \n        this.setState(prevState => ({\n          showModal: !prevState.showModal\n        }));\n      };\n    \n      handleOutsideClickbook = e => {\n        if (!this.nodebook.contains(e.target)) this.handleClickbook();\n      };\n    render(){\n        return(\n        <div>\n            <div className=\"row main\">\n            <img className=\"img dp\" src={\"https://d23yysxhlq0p5m.cloudfront.net/dp/\"+this.state.docselect+\".jpg\"}/>\n            {\n                uname===\"admin\"?this.state.dclist_load?\n                    <span className=\"spinner-border spin-white\"></span>\n                    :<Docsel className=\"container-fluid\" parentCallback = {this.selectcallback} doc={doclist}/>\n                :<div className=\"uname\">{uname}</div>\n            }\n            </div>\n            <div className=\"flexbox\">\n\n            <button className=\"logout-btna flexbox\" onClick={this.logout}>Logout</button>\n                    <div className=\"datepiktxt\">{data[0][0]}</div>\n                    <button className=\"datepikbtn\" onClick={this.handleClickbook}>change date</button>\n                    <div ref={nodebook => {this.nodebook = nodebook;}}>\n                        {this.state.showModal && (\n                            <Calendar className=\"modal-calendar\" maxDate={maxdate} onChange={this.onChange} value={date} />\n                        )}\n                    </div>\n            </div>\n                <div className= {this.state.calen_load?\"blur\":null} >\n                    <button className=\"t2\" onClick={() => { if (window.confirm(\"toggle holiday\"))this.openappt(\"hol\") }}>\n                        {day[date.getDay()]+this.state.holiday} </button>\n                        <table className=\"table chart\">\n                                {this.renderTable()}\n                        </table>\n                </div>\n        </div>)\n    }\n}\n\nexport default AdminMain;","/root/webdev/medbooking/medbooking/src/components/history.js",[],"/root/webdev/medbooking/medbooking/src/components/back_btn.js",[],"/root/webdev/medbooking/medbooking/src/components/doc_select.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":358,"column":17,"nodeType":"58","endLine":358,"endColumn":120},{"ruleId":"59","severity":2,"message":"60","line":164,"column":43,"nodeType":"61","messageId":"62","endLine":164,"endColumn":45},{"ruleId":"59","severity":2,"message":"63","line":165,"column":43,"nodeType":"61","messageId":"62","endLine":165,"endColumn":45},{"ruleId":"56","severity":1,"message":"57","line":304,"column":13,"nodeType":"58","endLine":304,"endColumn":116},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-undef","'gl' is not defined.","Identifier","undef","'fb' is not defined.","no-global-assign","no-unsafe-negation"]