[{"/root/webdev/medbooking/medbooking/src/index.js":"1","/root/webdev/medbooking/medbooking/src/pages/appointment.js":"2","/root/webdev/medbooking/medbooking/src/pages/main.js":"3","/root/webdev/medbooking/medbooking/src/pages/patient_form.js":"4","/root/webdev/medbooking/medbooking/src/pages/view_appointment.js":"5","/root/webdev/medbooking/medbooking/src/pages/adminlogin.js":"6","/root/webdev/medbooking/medbooking/src/pages/adminmain.js":"7","/root/webdev/medbooking/medbooking/src/components/history.js":"8","/root/webdev/medbooking/medbooking/src/components/back_btn.js":"9","/root/webdev/medbooking/medbooking/src/components/doc_select.js":"10","/root/webdev/medbooking/medbooking/src/pages/docedit.js":"11"},{"size":1176,"mtime":1611614459541,"results":"12","hashOfConfig":"13"},{"size":16470,"mtime":1614882448243,"results":"14","hashOfConfig":"13"},{"size":8441,"mtime":1614845245234,"results":"15","hashOfConfig":"13"},{"size":7012,"mtime":1614843492656,"results":"16","hashOfConfig":"13"},{"size":3588,"mtime":1614843806901,"results":"17","hashOfConfig":"13"},{"size":3173,"mtime":1614843404407,"results":"18","hashOfConfig":"13"},{"size":13823,"mtime":1614843383407,"results":"19","hashOfConfig":"13"},{"size":86,"mtime":1596016516262,"results":"20","hashOfConfig":"13"},{"size":345,"mtime":1596212097612,"results":"21","hashOfConfig":"13"},{"size":530,"mtime":1607865623632,"results":"22","hashOfConfig":"13"},{"size":4968,"mtime":1614843385603,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1qrbmnf",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"/root/webdev/medbooking/medbooking/src/index.js",[],["49","50"],"/root/webdev/medbooking/medbooking/src/pages/appointment.js",["51","52"],"/root/webdev/medbooking/medbooking/src/pages/main.js",[],"/root/webdev/medbooking/medbooking/src/pages/patient_form.js",[],"/root/webdev/medbooking/medbooking/src/pages/view_appointment.js",[],"/root/webdev/medbooking/medbooking/src/pages/adminlogin.js",[],"/root/webdev/medbooking/medbooking/src/pages/adminmain.js",["53"],"import React from 'react';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport Docsel from '../components/doc_select'\nimport Calendar from 'react-calendar';\nimport '../style/adminmain.module.scss';\nconst timings=[\"9:00\",\"10:00\",\"11:00\",\"12:00\",\"13:00\",\"14:00\",\"15:00\",\"16:00\",\"17:00\",\"18:00\"];//server 24 hr format\nvar doclist=[];//doctor json list with name and id and possible mor in future\nvar doc=[\"loading . . .   \",\"\"];\nvar date=new Date();//current/selected date throughout this file\nvar maxdate=new Date(date);\nconst time=[\"09:00 am\",\"10:00 am\",\"11:00 am\",\"12:00 pm\",\"01:00 pm\",\"02:00 pm\",\"03:00 pm\",\"04:00 pm\",\"05:00 pm\",\"06:00 pm\"];//12 hr format for displaying\nconst day=[\"sun\",\"mon\",\"tue\",\"wed\",\"thu\",\"fri\",\"sat\"];\nvar data =  [\n    [\"01-02-2020\"],\n    [\"mon\"],\n    [0,0,0,0,0,0,0,0,0,0,0,0],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n    [\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],[\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"],\n];\nmaxdate.setDate(maxdate.getDate()+180);\nvar uname,pass;\nclass AdminMain extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.check_login =this.check_login.bind(this);\n        this.check_login();\n        if(uname===\"admin\")\n            this.get_doc();\n        else\n            this.get_date(date);\n        this.state = {\n            docselect:uname,\n            holiday:\"\",\n            modload:false,\n            calen_load:true,\n            dclist_load:true,//doc list loading flag\n            confirm_box:false\n        };\n        this.logout=this.logout.bind(this);\n        this.openappt=this.openappt.bind(this);\n        this.reset_table=this.reset_table.bind(this);\n        axiosRetry(axios, { retries: 3 });\n      }\n      //login check\n      check_login(){\n        const loggedin = localStorage.getItem(\"admin\");\n        if (loggedin==null) {\n            alert(\"please login first\");\n            this.props.history.push('/admin');\n        }else{\n            uname=JSON.parse(loggedin)[\"uname\"];\n            pass=JSON.parse(loggedin)[\"pass\"];}\n      }\n      get_doc(e){\n          this.reset_table();\n        axios.get(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{}).then(res => {\n          if(res.data[\"message\"]!==\"Internal server error\"){\n              doclist=res.data;\n              doc[0]=doclist[0]['n'];\n              this.get_desc(doclist[0]['id']);\n              this.setState({docselect:doclist[0]['id']});\n              this.setState({docname:doclist[0]['n']});\n              this.onChange(date);\n              this.setState({dclist_load:false});\n          }\n        })\n    }\n      get_date(lpdate){\n        //post values\n        var month=lpdate.getMonth()+1\n        var getdate=lpdate.getDate()+'-'+month;\n        var dateyear=String(lpdate.getFullYear());\n        var doc=uname;\n        this.setState({holiday:\"\"});\n        if(uname===\"admin\")\n            doc=this.state.docselect;\n        var send={date:getdate,year:dateyear,doc:doc};\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/admin/view`,send).then(res => {   \n            if(res.data[\"message\"]!==\"Internal server error\"){\n                console.log(\"admin gdateresponse: \"+JSON.stringify(res.data));\n                    //if day value is h- holiday lock all timings on that thing\n                    if(JSON.stringify(res.data[\"day\"])==='{\"S\":\"h\"}'){\n                        console.log(\"admin gdateresponse: \"+JSON.stringify(res.data[\"day\"]));\n                        this.setState({holiday:\" (holiday)\"});\n                        for(var y=0;y<=9;y++)//10 time values\n                            {data[2][y]=5;}\n                    }else{//if not holiday or spl day parse timing slots\n                        for(y in timings){\n                            if(String(timings[y]) in res.data){\n                                console.log(String(timings[y])+\" oclock is \"+ JSON.stringify(res.data[timings[y]]));\n                                console.log(\"y value\"+y);   \n                                //[ a- available ] [t- taken] [ c- cancelled ] [ h- holiday/doc leave]\n                                if(res.data[timings[y]]['S']==='a'){\n                                    data[2][parseInt(y)]=0;\n                                }else if(res.data[timings[y]]['S']==='t'){//taken(appointment fixed)\n                                    data[2][parseInt(y)]=1;\n                                    this.get_details(lpdate,y);\n                                }else if(res.data[timings[y]]['S']==='u'){//doc unavailable\n                                    data[2][parseInt(y)]=3;\n                                }\n                            }\n                        }\n                    }\n                \n        this.setState({calen_load:false});\n            }\n            })\n    }\n    onChange = (datec) => {\n        this.reset_table();\n        date=datec;\n        console.log(\"date picker : \"+datec);\n        this.setState({calen_load:true});\n       //resetting table\n       for(var jks=0;jks<=12;jks++)\n            data[2][jks]=0;\n        //setting date and day\n        data[0][0]=datec.getDate()+'-'+(datec.getMonth()+1)+'-'+datec.getFullYear();//first row date\n        console.log(\"datec gdate: \"+datec);\n        data[1][0]=day[datec.getDay()];//second row day\n        //get timings per day\n        this.get_date(datec);//rest of all vertical time per day getting and parsing on data matrix\n        this.setState({showModal:false})\n      }\n    logout(){\n        this.setState({admin:{}});\n        localStorage.clear();\n        this.props.history.push('/admin');\n      }\n    get_details(e,i){\n        console.log(e);\n        var month=e.getMonth()+1\n        var getdate=e.getDate()+'-'+month;\n        var year=String(e.getFullYear());\n        var det={\n        date:getdate,\n        time:timings[i],\n        year:year,\n        pass:pass,\n        uname:uname,\n        doc:this.state.docselect}\n        console.log(det);\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/admin/details`,det).then(res => { \n            if(res.data!==\"error\"&&res.data!==\"no app\"){\n            console.log(res.data);\n            data[4][i]=res.data[\"first name\"].S+\" \"+res.data[\"last name\"].S;\n            data[5][i]=res.data.gen.S;\n            data[6][i]=res.data.dob.S;\n            data[7][i]=res.data.desc.S;\n            data[8][i]=res.data.mail.S;\n            this.setState({desc_load:false});\n            }\n    })\n    }\n    get_desc(e){\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{id:e}).then(res => { \n            if(res.data[\"message\"]!==\"Internal server error\"){\n            doc[1]=res.data;\n            this.setState({desc_load:false});\n            }\n    })}\n    selectcallback = (childData) => {\n        this.setState({desc_load:true});\n        this.setState({docselect:doclist[parseInt(childData)]['id']},()=>{\n        this.onChange(date);\n        this.setState({calen_load:true});});\n        this.setState({docname:doclist[childData]})\n        this.setState({docname:doclist[parseInt(childData)]['n']});\n        doc[0]=doclist[parseInt(childData)]['n'];\n        this.get_desc(doclist[childData]['id']);\n    }\n    renderTable() {\n        return data[2].map((dat,index)=>{\n            var cln,txt,con;// arrays of -  classname , display text , button disable flag\n                switch(dat){\n                    case 0:\n                        cln=\"appt-a\";//available\n                        con=\"mark doctor unavailable ?\";\n                        txt=time[index];\n                        break;\n                    case 1:\n                        cln=\"appt-b\";\n                        con=\"cancel appointment ?\";\n                        txt=time[index]+\"\\n fixed \";//already booked taken\n                        break;\n                    case 3:\n                        cln=\"appt-u\";//doc unavailable\n                        con=\"mark doctor available ?\";\n                        txt=\"unavailable\";\n                        break;\n                    case 5:\n                        cln=\"appt-l\";//locked\n                        txt=time[index]+\"\\n --- \";//locked date as its not today or holiday\n                        break;\n                    default:\n                        cln=\"appt-a\";\n                        txt=time[index-2];\n                }\n               return(<tbody>\n                    <tr key={index} className={\"row\"+index}>\n                        {uname===\"admin\"?\n                        <td><button className={cln} disabled={dat===5?1:0} onClick={() => { if(uname===\"admin\"){if (window.confirm(con)){console.log(\"adminmod-\"+dat);this.openappt(index)}} }} value={[index]}>{txt}</button></td>:\n                        <td><button className={cln}  value={[index]}>{txt}</button></td>\n                    }\n                        <td className=\"textblk\">{data[4][index]}</td>\n                        <td className=\"textblk\">{data[5][index]}</td>\n                        <td className=\"textblk\">{data[6][index]}</td>\n                        <td className=\"textblk\">{data[7][index]}</td>\n                        <td className=\"textblk\">{data[8][index]}</td>\n                    </tr>\n                    </tbody>)\n           })\n        \n    }\n    reset_table(){\n        for(var i=0;i<=11;i++)\n            data[2][i]=0;\n        for(i=3;i<=8;i++)\n        for(var j=0;j<=10;j++){\n            data[i][j]=\" \";\n        }\n    }\n\n    openappt(bkval){\n        console.log(bkval);\n        if(this.state.calen_load===false){\n            //params setting\n            var month=date.getMonth()+1;\n            var getdate=date.getDate()+'-'+month;\n            var params={\n                doc:this.state.docselect,\n                uname:uname,\n                upass:pass,\n                mod:\"\",\n                time:\"\",\n                year:String(date.getFullYear()),\n                date:getdate\n            }\n            if(bkval===\"hol\"){\n                console.log(\"holiday curdate: \"+ date);\n                if(this.state.holiday===\"\")\n                    params[\"mod\"]=\"hol\";\n                else\n                    params[\"mod\"]=\"wor\";\n                this.adminmod(params)\n            }\n            else{\n                switch(data[2][bkval]){\n                    case 0:\n                        params[\"mod\"]=\"ua\";\n                        params[\"time\"]=timings[bkval]\n                        this.adminmod(params)\n                        break;\n                    case 1:\n                        params[\"mod\"]=\"can\";\n                        params[\"time\"]=timings[bkval]\n                        this.adminmod(params)\n                        break;\n                    case 3:\n                        params[\"mod\"]=\"a\";\n                        params[\"time\"]=timings[bkval]\n                        this.adminmod(params)\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n    adminmod(params){\n        this.setState({calen_load:true});\n        console.log(params);\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/admin/mod`,params).then(res => {\n            //console.log(res.data);\n          if(res.data===\"success\"){\n            this.onChange(date);\n          }\n        }).catch(error => {\n            this.setState({calen_load:false});\n            alert(\"please try again\");\n          });\n    }\n    handleClickbook = () => {\n        if (!this.state.showModal) {\n          document.addEventListener(\"click\", this.handleOutsideClickbook, false);\n        } else {\n          document.removeEventListener(\"click\", this.handleOutsideClickbook, false);\n        }\n    \n        this.setState(prevState => ({\n          showModal: !prevState.showModal\n        }));\n      };\n    \n      handleOutsideClickbook = e => {\n        if (!this.nodebook.contains(e.target)) this.handleClickbook();\n      };\n    render(){\n        return(\n        <div>\n            <div className=\"row main\">\n            <img className=\"img dp\" src={\"https://d23yysxhlq0p5m.cloudfront.net/dp/\"+this.state.docselect+\".jpg\"}/>\n            {\n                uname===\"admin\"?this.state.dclist_load?\n                    <span className=\"spinner-border spin-white\"></span>\n                    :<Docsel className=\"container-fluid\" parentCallback = {this.selectcallback} doc={doclist}/>\n                :<div className=\"uname\">{uname}</div>\n            }\n            </div>\n            <div className=\"flexbox\">\n            <button onClick={\n                this.props.history.push('/admin/doc')}>doctor management</button>\n            <button className=\"logout-btna flexbox\" onClick={this.logout}>Logout</button>\n                    <div className=\"datepiktxt\">{data[0][0]}</div>\n                    <button className=\"datepikbtn\" onClick={this.handleClickbook}>change date</button>\n                    <div ref={nodebook => {this.nodebook = nodebook;}}>\n                        {this.state.showModal && (\n                            <Calendar className=\"modal-calendar\" maxDate={maxdate} onChange={this.onChange} value={date} />\n                        )}\n                    </div>\n            </div>\n                <div className= {this.state.calen_load?\"blur\":null} >\n                    <button className=\"t2\" onClick={() => { if (window.confirm(\"toggle holiday\"))this.openappt(\"hol\") }}>\n                        {day[date.getDay()]+this.state.holiday} </button>\n                        <table className=\"table chart\">\n                                {this.renderTable()}\n                        </table>\n                </div>\n        </div>)\n    }\n}\n\nexport default AdminMain;","/root/webdev/medbooking/medbooking/src/components/history.js",[],"/root/webdev/medbooking/medbooking/src/components/back_btn.js",[],"/root/webdev/medbooking/medbooking/src/components/doc_select.js",[],"/root/webdev/medbooking/medbooking/src/pages/docedit.js",["54","55","56"],"import React from 'react';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport '../style/doc_edit.module.scss';\nvar uname,pass;\nvar doclist=[{id:\"\",n:\"\"}];//doctor json list with name and id and possible mor in future\nclass Doc_edit extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            id:\"\",\n            uname:\"\",\n            pass:\"\",\n            changed:false,\n            editbox:false,\n            load:true\n        };\n        this.check_login=this.check_login.bind(this);\n        this.get_doc=this.get_doc.bind(this);\n        this.listview=this.listview.bind(this);\n        this.edit_men=this.edit_men.bind(this);\n        this.c_uname=this.c_uname.bind(this);\n        this.c_pass=this.c_pass.bind(this); \n        this.get_doc();\n        axiosRetry(axios, { retries: 2 });\n      }\n      c_uname(e){this.setState({uname: e.currentTarget.value});this.setState({changed:true});}\n      c_pass(e){this.setState({pass: e.currentTarget.value});this.setState({changed:true});}\n      //login check\n      check_login(){\n        const loggedin = localStorage.getItem(\"admin\");\n        if (loggedin==null) {\n            alert(\"please login first\");\n            this.props.history.push('/admin');\n        }else{\n            uname=JSON.parse(loggedin)[\"uname\"];\n            pass=JSON.parse(loggedin)[\"pass\"];}\n      }\n      edit_men(id){\n        this.setState({changed:false});\n        this.setState({pass:\"\"});\n        this.setState({id:doclist[id.target.value]['id']})\n        this.setState({uname:doclist[id.target.value]['n']})\n        this.setState({showModal:true})\n      }\n      get_doc(e){\n          this.setState({load:true})\n        axios.get(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{}).then(res => {\n            //console.log(res.data);\n          if(res.data[\"message\"]!==\"Internal server error\"){\n              doclist=res.data;\n              this.setState({docselect:doclist[0]['id']});\n              this.setState({docname:doclist[0]['n']});\n              this.setState({dclist_load:false});\n          }\n        })\n    }\n    deldoc(e){\n      console.log(\"delete doc \"+e.currentTarget.value);\n      axios.get(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/deldoc`,{}).then(res => {\n          if(res.data[\"message\"]!==\"Internal server error\"){\n              doclist=res.data;\n              this.setState({docselect:doclist[0]['id']});\n              this.setState({docname:doclist[0]['n']});\n              this.setState({dclist_load:false});\n          }\n        })\n    }\n    sendchanges(e){\n      var id=e.target.value;\n      axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/editdoc`,{id:id}).then(res => { \n            if(res.data[\"message\"]!==\"Internal server error\"){\n            alert(\"changes saved\");\n            this.setState({desc_load:false});\n            }\n    })\n    }\n    //rendering list of doctors for editing\n    listview(){\n        return doclist.map((dat, index) => {\n            return <tr className=\"row\"><button className=\"edit\" onClick={this.edit_men} value={index}>{dat['n']}</button></tr>\n        })\n    }get_desc(e){\n        axios.post(`https://bqhdj6kx2j.execute-api.ap-south-1.amazonaws.com/test/getdoc`,{id:e}).then(res => { \n            if(res.data[\"message\"]!==\"Internal server error\"){\n              \n            }\n    })\n    }\n    handleClickbook = () => {\n        if (!this.state.showModal) {\n          document.addEventListener(\"click\", this.handleOutsideClickbook, false);\n        } else {\n          document.removeEventListener(\"click\", this.handleOutsideClickbook, false);\n        }\n    \n        this.setState(prevState => ({\n          showModal: !prevState.showModal\n        }));\n      };\n    \n      handleOutsideClickbook = e => {\n        if (!this.nodebook.contains(e.target)) this.handleClickbook();\n      };\n    render(){\n        return(\n        <div>\n            <div className=\"header row\">\n              doctor management\n            </div>\n            <div ref={nodebook => {this.nodebook = nodebook;}}>\n            {this.state.showModal && (\n              <div>\n              <div>{this.state.id}</div>\n              <img onClick={console.log(\"dp edit\")} className=\"img dp\" src={\"https://d23yysxhlq0p5m.cloudfront.net/dp/\"+this.state.id+\".jpg\"}/>\n              <input value={this.state.uname} onChange={this.c_uname} className=\"inputbox \" placeholder=\"User Name\" />\n              <input value={this.state.pass} onChange={this.c_pass} className=\"inputbox \" placeholder=\"pass\" />\n              <button onClick={this.deldoc} value={this.state.id}>delete</button>\n              <button disabled={!this.state.changed} onClick={this.sendchanges} value={this.state.id}>save changes</button>\n              </div>\n            )}\n            </div>\n            <table className=\"doclst\">\n            {this.listview()}\n            </table>\n        </div>)\n    }\n}\n\nexport default Doc_edit;",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":5,"column":8,"nodeType":"63","messageId":"64","endLine":5,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":344,"column":17,"nodeType":"67","endLine":344,"endColumn":120},{"ruleId":"65","severity":1,"message":"66","line":304,"column":13,"nodeType":"67","endLine":304,"endColumn":116},{"ruleId":"61","severity":1,"message":"68","line":36,"column":13,"nodeType":"63","messageId":"64","endLine":36,"endColumn":18},{"ruleId":"61","severity":1,"message":"69","line":37,"column":13,"nodeType":"63","messageId":"64","endLine":37,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":115,"column":15,"nodeType":"67","endLine":115,"endColumn":144},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'uname' is assigned a value but never used.","'pass' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]